import warnings
warnings.filterwarnings("ignore")
import sys
sys.path.append("/kaggle/input/read-data")
import torch
import torchvision.models as models
import torch.nn as nn
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from read_data import PCamDataset
from tqdm import tqdm
import numpy as np
import ast
import types  # Required to override forward function

# Set device (use GPU if available, otherwise use CPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

batch_size = 256
test_pref = "/kaggle/input/computer-vision-2/"

# Load dataset and move data to DataLoader
test_dataset = PCamDataset(
    test_pref + "camelyonpatch_level_2_split_test_x.h5",
    test_pref + "camelyonpatch_level_2_split_test_y.h5"
)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# Define No-Skip ResNet Forward Function
def forward_no_skip(self, x):
    x = self.conv1(x)
    x = self.bn1(x)
    x = self.relu(x)
    x = self.maxpool(x)

    for layer in [self.layer1, self.layer2, self.layer3, self.layer4]:
        for block in layer:
            x = block.conv1(x)
            x = block.bn1(x)
            x = block.relu(x)
            x = block.conv2(x)
            x = block.bn2(x)
            x = block.relu(x)  # Skip connection removed

    x = self.avgpool(x)
    x = torch.flatten(x, 1)
    x = self.fc(x)
    return x

# Function to load No-Skip ResNet Model
def load_resnet_no_skip(model_path):
    model = models.resnet18(pretrained=False)  # Load ResNet-18
    model.fc = nn.Linear(model.fc.in_features, 2)  # Modify final layer for binary classification
    
    # Override forward function with no-skip version
    model.forward = types.MethodType(forward_no_skip, model)

    # Load model weights
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.to(device)  # Move model to GPU/CPU
    return model

# Evaluation function (unchanged)
def evaluate(model, dataloader):
    model.eval()
    all_labels = []
    all_predictions = []

    with torch.no_grad():
        for images, labels in tqdm(dataloader, desc="Evaluating"):
            images, labels = images.to(device), labels.to(device)

            outputs = model(images)
            _, predicted = outputs.max(1)

            all_labels.extend(labels.cpu().numpy())
            all_predictions.extend(predicted.cpu().numpy())

    all_labels = np.array(all_labels)
    all_predictions = np.array(all_predictions)

    accuracy = accuracy_score(all_labels, all_predictions)
    precision = precision_score(all_labels, all_predictions, average='macro')
    recall = recall_score(all_labels, all_predictions, average='macro')
    f1 = f1_score(all_labels, all_predictions, average='macro')

    return accuracy, precision, recall, f1

# Load No-Skip ResNet Model
model_folder = "/kaggle/input/resnet-skip/"
model_name = "resnet.pth"
model = load_resnet_no_skip(model_folder + model_name)

# Evaluate model
accuracy, precision, recall, f1 = evaluate(model, test_loader)

# Print results
print(f"{accuracy:.4f}   & {precision:.4f}   & {recall:.4f}   & {f1:.4f}")

# Read accuracy values from plot.txt
with open(model_folder + "plot.txt", "r") as file:
    data = ast.literal_eval(file.read().strip())

train_acc = [x[1] for x in data]
val_acc = [x[3] for x in data]

# Extract accuracies for 10th, 20th, and 25th epochs
epochs = [9, 19, 24]
train_selected = [train_acc[i] for i in epochs]
val_selected = [val_acc[i] for i in epochs]

# Print formatted LaTeX output
print(" & ".join(f"{acc:.2f}" for acc in train_selected) + " & " +
      " & ".join(f"{acc:.2f}" for acc in val_selected) + " \\\\")
